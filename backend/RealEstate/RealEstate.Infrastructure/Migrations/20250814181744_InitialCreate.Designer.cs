// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Infrastructure;

#nullable disable

namespace RealEstate.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814181744_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstate.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RealEstate.Core.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("RealEstate.Core.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("CarSpots")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f6694f2-845f-493a-9ba5-baa7115124cd"),
                            Address = "23 Palm View Rd",
                            Bathrooms = 4,
                            Bedrooms = 5,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "A stunning luxury villa with private pool, sea view, and modern interiors.",
                            ImageUrl = "https://images.unsplash.com/photo-1600607687939-ce8a6c25118c",
                            Price = 2500000.00m,
                            PropertyType = "Sale",
                            Title = "Luxury Villa in Dubai Marina"
                        },
                        new
                        {
                            Id = new Guid("3b4df4c5-8400-48c2-88f6-d2572b7f76dc"),
                            Address = "12 Sheikh Zayed Rd",
                            Bathrooms = 2,
                            Bedrooms = 2,
                            CarSpots = 1,
                            City = "Dubai",
                            Description = "Modern 2-bedroom apartment close to metro station, with city skyline view.",
                            ImageUrl = "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2",
                            Price = 120000.00m,
                            PropertyType = "Rent",
                            Title = "Modern Apartment Downtown"
                        },
                        new
                        {
                            Id = new Guid("f32e2a94-4578-4f46-b3c3-629b032b88f2"),
                            Address = "45 Beachside Ave",
                            Bathrooms = 5,
                            Bedrooms = 6,
                            CarSpots = 3,
                            City = "Dubai",
                            Description = "Exclusive beachfront villa with private access to the beach and panoramic sea views.",
                            ImageUrl = "https://images.unsplash.com/photo-1580587771525-78b9dba3b914",
                            Price = 4500000.00m,
                            PropertyType = "Sale",
                            Title = "Beachfront Villa in Jumeirah"
                        },
                        new
                        {
                            Id = new Guid("b3db3af2-dc5a-4f1f-8a79-8fb9e6bcf156"),
                            Address = "101 Bay Square",
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CarSpots = 0,
                            City = "Dubai",
                            Description = "Cozy studio apartment ideal for professionals, located in the heart of Business Bay.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 55000.00m,
                            PropertyType = "Rent",
                            Title = "Affordable Studio in Business Bay"
                        },
                        new
                        {
                            Id = new Guid("bb72f20c-cd2f-4d76-9f38-1a6b71baf271"),
                            Address = "8 Al Khawaneej Rd",
                            Bathrooms = 3,
                            Bedrooms = 4,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Spacious family home with garden, close to schools and parks.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 1800000.00m,
                            PropertyType = "Sale",
                            Title = "Family Home in Mirdif"
                        },
                        new
                        {
                            Id = new Guid("8f841f7e-a5f4-46b8-973d-8cf8b0f34f8b"),
                            Address = "99 Burj Khalifa Blvd",
                            Bathrooms = 4,
                            Bedrooms = 4,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Luxury penthouse with panoramic views of the Dubai skyline and modern amenities.",
                            ImageUrl = "https://images.unsplash.com/photo-1600585154340-be6161a56a0c",
                            Price = 3500000.00m,
                            PropertyType = "Sale",
                            Title = "Penthouse with Skyline View"
                        },
                        new
                        {
                            Id = new Guid("12b9a4b3-dfa0-4d19-bd66-7a0db144a523"),
                            Address = "Tower 5, Silicon Oasis",
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CarSpots = 0,
                            City = "Dubai",
                            Description = "Affordable studio apartment in a vibrant tech hub area.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 42000.00m,
                            PropertyType = "Rent",
                            Title = "Studio in Dubai Silicon Oasis"
                        },
                        new
                        {
                            Id = new Guid("84d7479d-872e-4d3b-9d16-553f20d7aa0a"),
                            Address = "22 Desert Bloom",
                            Bathrooms = 3,
                            Bedrooms = 3,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Beautiful family townhouse with community pool and park access.",
                            ImageUrl = "https://images.unsplash.com/photo-1599423300746-b62533397364",
                            Price = 1600000.00m,
                            PropertyType = "Sale",
                            Title = "Townhouse in Arabian Ranches"
                        },
                        new
                        {
                            Id = new Guid("1eaa38c3-dc5a-4a16-b9d2-4a2b4b6a8b63"),
                            Address = "Gate Tower 2, DIFC",
                            Bathrooms = 2,
                            Bedrooms = 2,
                            CarSpots = 1,
                            City = "Dubai",
                            Description = "Stylish loft apartment in Dubai's financial district.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 175000.00m,
                            PropertyType = "Rent",
                            Title = "Loft Apartment in DIFC"
                        },
                        new
                        {
                            Id = new Guid("59ff22c0-38cb-4fd4-8c1b-f82a3d0d52d8"),
                            Address = "Palm Crescent West",
                            Bathrooms = 6,
                            Bedrooms = 6,
                            CarSpots = 3,
                            City = "Dubai",
                            Description = "Exclusive Palm Jumeirah villa with private beach access.",
                            ImageUrl = "https://images.unsplash.com/photo-1605276374104-dee2a0ed3cd6",
                            Price = 5200000.00m,
                            PropertyType = "Sale",
                            Title = "Modern Villa in Palm Jumeirah"
                        },
                        new
                        {
                            Id = new Guid("fd8b7e0c-38f3-4dd7-985b-8702646f316b"),
                            Address = "Al Barsha 1",
                            Bathrooms = 2,
                            Bedrooms = 2,
                            CarSpots = 1,
                            City = "Dubai",
                            Description = "Convenient apartment located near shopping and metro.",
                            ImageUrl = "https://images.unsplash.com/photo-1600585154340-be6161a56a0c",
                            Price = 85000.00m,
                            PropertyType = "Rent",
                            Title = "Apartment near Mall of the Emirates"
                        },
                        new
                        {
                            Id = new Guid("2845462a-931a-4b94-9e9f-b861c2d39d83"),
                            Address = "Emirates Hills",
                            Bathrooms = 7,
                            Bedrooms = 7,
                            CarSpots = 4,
                            City = "Dubai",
                            Description = "Spacious villa with golf course view and luxury finishes.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 7800000.00m,
                            PropertyType = "Sale",
                            Title = "Golf Course Villa"
                        },
                        new
                        {
                            Id = new Guid("5f46e87d-1fc8-4d88-9345-dc44a2f63579"),
                            Address = "Cluster C, JLT",
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CarSpots = 1,
                            City = "Dubai",
                            Description = "Fully furnished serviced apartment with lake view.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 130000.00m,
                            PropertyType = "Rent",
                            Title = "Serviced Apartment in JLT"
                        },
                        new
                        {
                            Id = new Guid("c3dc7f4d-5236-4b2d-8a9d-037d3b9dce17"),
                            Address = "Bluewaters Island",
                            Bathrooms = 5,
                            Bedrooms = 5,
                            CarSpots = 3,
                            City = "Dubai",
                            Description = "Ultra-luxury penthouse with ocean view and private elevator.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 9000000.00m,
                            PropertyType = "Sale",
                            Title = "Luxury Beach Penthouse"
                        },
                        new
                        {
                            Id = new Guid("c6c1a6ec-87da-4013-baa6-93d4b1b18df8"),
                            Address = "Victory Heights",
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CarSpots = 1,
                            City = "Dubai",
                            Description = "Affordable apartment with access to sports facilities.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 65000.00m,
                            PropertyType = "Rent",
                            Title = "Apartment in Dubai Sports City"
                        },
                        new
                        {
                            Id = new Guid("9d0ccf94-bff3-4454-879a-6df93dc6f79a"),
                            Address = "Al Qudra Road",
                            Bathrooms = 4,
                            Bedrooms = 4,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Elegant villa with expansive desert views and modern amenities.",
                            ImageUrl = "https://images.unsplash.com/photo-1600585154340-be6161a56a0c",
                            Price = 2200000.00m,
                            PropertyType = "Sale",
                            Title = "Desert View Villa"
                        },
                        new
                        {
                            Id = new Guid("d047a35c-1b8c-49d2-961e-9f14d3a72b8c"),
                            Address = "Boulevard Central",
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CarSpots = 0,
                            City = "Dubai",
                            Description = "Studio apartment within walking distance to Dubai Mall.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 95000.00m,
                            PropertyType = "Rent",
                            Title = "Downtown Studio"
                        },
                        new
                        {
                            Id = new Guid("e46c6bc7-b56c-4eb3-b6c8-6c92a64c2c76"),
                            Address = "Springs 15",
                            Bathrooms = 3,
                            Bedrooms = 3,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Family villa in a gated community with lakes and parks.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 2100000.00m,
                            PropertyType = "Sale",
                            Title = "Villa in The Springs"
                        },
                        new
                        {
                            Id = new Guid("f9f17c25-b92d-4cf7-9a58-89a6c3dd4f21"),
                            Address = "Dubai Marina Gate 1",
                            Bathrooms = 3,
                            Bedrooms = 3,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Spacious apartment with marina view and premium facilities.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 200000.00m,
                            PropertyType = "Rent",
                            Title = "Luxury Apartment in Marina Gate"
                        },
                        new
                        {
                            Id = new Guid("a85af594-97fd-4b90-8cbf-6e6e9e8d7f8d"),
                            Address = "Dubai Marina Gate 2",
                            Bathrooms = 2,
                            Bedrooms = 2,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Spacious apartment with marina view.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 20000.00m,
                            PropertyType = "Rent",
                            Title = "Luxury Apartment in Marina City"
                        },
                        new
                        {
                            Id = new Guid("67175a89-5c65-4e41-854b-fc7ecbdf5f42"),
                            Address = "Dubai Marina Gate 3",
                            Bathrooms = 2,
                            Bedrooms = 2,
                            CarSpots = 2,
                            City = "Dubai",
                            Description = "Spacious apartment with marina view.",
                            ImageUrl = "https://images.unsplash.com/photo-1613490493576-7fde63acd811",
                            Price = 10000.00m,
                            PropertyType = "Rent",
                            Title = "Luxury Apartment in Marina City"
                        });
                });

            modelBuilder.Entity("RealEstate.Core.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealEstate.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealEstate.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealEstate.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate.Core.Entities.Favorite", b =>
                {
                    b.HasOne("RealEstate.Core.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Core.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("RealEstate.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
